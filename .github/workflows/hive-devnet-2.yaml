name: Hive - Devnet 2
on:
  schedule:
    - cron: '45 12 * * *'
  workflow_dispatch:
    # Note: We're limited to 10 inputs
    inputs:
      client:
        type: string
        default: '"go-ethereum","reth","nethermind","nimbus-el","besu","erigon"'
        description: Comma-separated list of clients to test .e.g go-ethereum, besu, reth, nethermind, erigon, nimbus-el
      simulator:
        type: string
        default: '"ethereum/eest/consume-engine","ethereum/eest/consume-rlp"'
        description: >-
          Comma-separated list of simulators to test
          .e.g ethereum/rpc-compat, ethereum/eest/consume-engine, ethereum/eest/consume-rlp, ethereum/eest/execute-blobs
      hive_version:
        type: string
        default: ethereum/hive@master
        description: GitHub repository and tag for hive (repo@tag)
      client_source:
        type: choice
        description: >-
          How client images should be sourced.
          'git' will use the github repo and tag (See client_versions).
          'docker' will use the docker registry and tag (See client_images).
        options:
          - git
          - docker
      common_client_tag:
        type: string
        description: 'If provided, this tag will be used for all clients, overriding individual tags/branches in client_versions and client_images'
        default: 'fusaka-devnet-2'
      client_versions:
        type: string
        default: |
          {
            "geth": "ethereum/go-ethereum@master",
            "besu": "hyperledger/besu@main",
            "reth": "paradigmxyz/reth@main",
            "nethermind": "NethermindEth/nethermind@master",
            "erigon": "erigontech/erigon@main",
            "nimbusel": "status-im/nimbus-eth1@master"
          }
        description: 'JSON object containing client versions in format {"client": "repo@tag", ...}'
      client_images:
          type: string
          default: |
            {
              "geth": "docker.ethquokkaops.io/dh/ethpandaops/geth:master",
              "besu": "docker.ethquokkaops.io/dh/ethpandaops/besu:main",
              "reth": "docker.ethquokkaops.io/dh/ethpandaops/reth:main",
              "nethermind": "docker.ethquokkaops.io/dh/ethpandaops/nethermind:master",
              "erigon": "docker.ethquokkaops.io/dh/ethpandaops/erigon:main",
              "nimbusel": "docker.ethquokkaops.io/dh/ethpandaops/nimbus-eth1:master"
            }
          description: 'JSON object containing client docker images in format {"client": "registry:tag", ...}'

env:
  # Proxy
  GOPROXY: "${{ vars.GOPROXY }}"
  # Hive action environment variables
  S3_BUCKET: hive-results
  S3_PATH: fusaka-devnet-2
  S3_PUBLIC_URL: https://hive.ethpandaops.io/fusaka-devnet-2
  INSTALL_RCLONE_VERSION: v1.68.2
  EEST_BUILD_ARG_FIXTURES: https://github.com/ethereum/execution-spec-tests/releases/download/fusaka-devnet-2%40v1.2.0/fixtures_fusaka-devnet-2.tar.gz
  EEST_BUILD_ARG_BRANCH: fusaka-devnet-2
  # Flags used for all simulators
  GLOBAL_EXTRA_FLAGS: >-
    --client.checktimelimit=180s
    --sim.parallelism=4
    --docker.auth
    --docker.buildoutput
  # Flags used for the ethereum/eest/consume-engine simulator
  EEST_ENGINE_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/consume-rlp simulator
  EEST_RLP_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/execute simulator
  EEST_EXECUTE_FLAGS: >-
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
  # Flags used for the ethereum/rpc-compat simulator
  RPC_COMPAT_FLAGS: >-
    --sim.loglevel=3

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      # Hive version
      hive_repo: ${{ steps.parse.outputs.hive_repo }}
      hive_tag: ${{ steps.parse.outputs.hive_tag }}
      # Git versions of the clients
      geth_repo: ${{ steps.parse.outputs.geth_repo }}
      geth_tag: ${{ steps.parse.outputs.geth_tag }}
      besu_repo: ${{ steps.parse.outputs.besu_repo }}
      besu_tag: ${{ steps.parse.outputs.besu_tag }}
      reth_repo: ${{ steps.parse.outputs.reth_repo }}
      reth_tag: ${{ steps.parse.outputs.reth_tag }}
      nethermind_repo: ${{ steps.parse.outputs.nethermind_repo }}
      nethermind_tag: ${{ steps.parse.outputs.nethermind_tag }}
      erigon_repo: ${{ steps.parse.outputs.erigon_repo }}
      erigon_tag: ${{ steps.parse.outputs.erigon_tag }}
      nimbusel_repo: ${{ steps.parse.outputs.nimbusel_repo }}
      nimbusel_tag: ${{ steps.parse.outputs.nimbusel_tag }}
      # Docker images for clients - registry and tag separated
      geth_docker_registry: ${{ steps.parse.outputs.geth_docker_registry }}
      geth_docker_tag: ${{ steps.parse.outputs.geth_docker_tag }}
      besu_docker_registry: ${{ steps.parse.outputs.besu_docker_registry }}
      besu_docker_tag: ${{ steps.parse.outputs.besu_docker_tag }}
      reth_docker_registry: ${{ steps.parse.outputs.reth_docker_registry }}
      reth_docker_tag: ${{ steps.parse.outputs.reth_docker_tag }}
      nethermind_docker_registry: ${{ steps.parse.outputs.nethermind_docker_registry }}
      nethermind_docker_tag: ${{ steps.parse.outputs.nethermind_docker_tag }}
      erigon_docker_registry: ${{ steps.parse.outputs.erigon_docker_registry }}
      erigon_docker_tag: ${{ steps.parse.outputs.erigon_docker_tag }}
      nimbusel_docker_registry: ${{ steps.parse.outputs.nimbusel_docker_registry }}
      nimbusel_docker_tag: ${{ steps.parse.outputs.nimbusel_docker_tag }}
      # client_config contains the YAML client config for Hive
      client_config: ${{ steps.client_config.outputs.config }}
    steps:
      - id: parse
        run: |
          # Define client configurations
          declare -A CLIENT_DEFAULTS=(
            ["geth"]="ethereum/go-ethereum@master"
            ["besu"]="hyperledger/besu@main"
            ["reth"]="paradigmxyz/reth@main"
            ["nethermind"]="NethermindEth/nethermind@master"
            ["erigon"]="erigontech/erigon@main"
            ["nimbusel"]="status-im/nimbus-eth1@master"
          )

          declare -A CLIENT_IMAGE_DEFAULTS=(
            ["geth"]="docker.ethquokkaops.io/dh/ethpandaops/geth:master"
            ["besu"]="docker.ethquokkaops.io/dh/ethpandaops/besu:main"
            ["reth"]="docker.ethquokkaops.io/dh/ethpandaops/reth:main"
            ["nethermind"]="docker.ethquokkaops.io/dh/ethpandaops/nethermind:master"
            ["erigon"]="docker.ethquokkaops.io/dh/ethpandaops/erigon:main"
            ["nimbusel"]="docker.ethquokkaops.io/dh/ethpandaops/nimbus-eth1:master"
          )

          CLIENT_VERSIONS='${{ inputs.client_versions }}'
          CLIENT_IMAGES='${{ inputs.client_images }}'

          # For scheduled runs, set the common client tag
          if [ "${{ github.event_name }}" = "schedule" ]; then
            COMMON_CLIENT_TAG='fusaka-devnet-2'
          else
            COMMON_CLIENT_TAG='${{ inputs.common_client_tag }}'
          fi

          # Process each client
          for client in "${!CLIENT_DEFAULTS[@]}"; do
            # Parse client version
            if [ -n "$CLIENT_VERSIONS" ]; then
              client_version=$(echo "$CLIENT_VERSIONS" | jq -r ".${client} // \"${CLIENT_DEFAULTS[$client]}\"")
            else
              client_version="${CLIENT_DEFAULTS[$client]}"
            fi

            # Extract repo and tag from version
            echo "${client}_repo=$(echo ${client_version} | cut -d@ -f1)" >> $GITHUB_OUTPUT
            if [ -n "$COMMON_CLIENT_TAG" ]; then
              echo "${client}_tag=${COMMON_CLIENT_TAG}" >> $GITHUB_OUTPUT
            else
              echo "${client}_tag=$(echo ${client_version} | cut -d@ -f2)" >> $GITHUB_OUTPUT
            fi

            # Parse client docker image
            if [ -n "$CLIENT_IMAGES" ]; then
              client_image=$(echo "$CLIENT_IMAGES" | jq -r ".${client} // \"${CLIENT_IMAGE_DEFAULTS[$client]}\"")
            else
              client_image="${CLIENT_IMAGE_DEFAULTS[$client]}"
            fi

            # Extract registry and tag from docker image
            echo "${client}_docker_registry=$(echo ${client_image} | cut -d: -f1)" >> $GITHUB_OUTPUT
            if [ -n "$COMMON_CLIENT_TAG" ]; then
              echo "${client}_docker_tag=${COMMON_CLIENT_TAG}" >> $GITHUB_OUTPUT
            else
              echo "${client}_docker_tag=$(echo ${client_image} | cut -d: -f2)" >> $GITHUB_OUTPUT
            fi
          done

          # Parse hive repo and tag
          HIVE_DEFAULT="ethereum/hive@master"
          echo "hive_repo=$(echo ${HIVE_VERSION:-$HIVE_DEFAULT} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "hive_tag=$(echo ${HIVE_VERSION:-$HIVE_DEFAULT} | cut -d@ -f2)" >> $GITHUB_OUTPUT

        env:
          HIVE_VERSION: ${{ inputs.hive_version }}
      - id: client_config_git
        run: |
          # Generate git client config
          cat << 'EOF' >> $GITHUB_OUTPUT
          config<<ENDCONFIG
          - client: go-ethereum
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.geth_repo }}
              tag: ${{ steps.parse.outputs.geth_tag }}
              GOPROXY: ${{ env.GOPROXY }}
          - client: besu
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.besu_repo }}
              tag: ${{ steps.parse.outputs.besu_tag }}
          - client: reth
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.reth_repo }}
              tag: ${{ steps.parse.outputs.reth_tag }}
          - client: nethermind
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.nethermind_repo }}
              tag: ${{ steps.parse.outputs.nethermind_tag }}
          - client: erigon
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.erigon_repo }}
              tag: ${{ steps.parse.outputs.erigon_tag }}
              GOPROXY: ${{ env.GOPROXY }}
          - client: nimbus-el
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.nimbusel_repo }}
              tag: ${{ steps.parse.outputs.nimbusel_tag }}
          ENDCONFIG
          EOF
      - id: client_config_docker
        run: |
          # Generate docker client config
          cat << 'EOF' >> $GITHUB_OUTPUT
          config<<ENDCONFIG
          - client: go-ethereum
            nametag: default
            build_args:
              baseimage: ${{ steps.parse.outputs.geth_docker_registry }}
              tag: ${{ steps.parse.outputs.geth_docker_tag }}
          - client: besu
            nametag: default
            build_args:
              baseimage: ${{ steps.parse.outputs.besu_docker_registry }}
              tag: ${{ steps.parse.outputs.besu_docker_tag }}
          - client: reth
            nametag: default
            build_args:
              baseimage: ${{ steps.parse.outputs.reth_docker_registry }}
              tag: ${{ steps.parse.outputs.reth_docker_tag }}
          - client: nethermind
            nametag: default
            build_args:
              baseimage: ${{ steps.parse.outputs.nethermind_docker_registry }}
              tag: ${{ steps.parse.outputs.nethermind_docker_tag }}
          - client: erigon
            nametag: default
            build_args:
              baseimage: ${{ steps.parse.outputs.erigon_docker_registry }}
              tag: ${{ steps.parse.outputs.erigon_docker_tag }}
          - client: nimbus-el
            nametag: default
            build_args:
              baseimage: ${{ steps.parse.outputs.nimbusel_docker_registry }}
              tag: ${{ steps.parse.outputs.nimbusel_docker_tag }}
          ENDCONFIG
          EOF
      - id: client_config
        run: |
          # Generate client config based on client_source
          cat << 'EOF' >> $GITHUB_OUTPUT
          config<<ENDCONFIG
          ${{
            github.event_name == 'schedule' && steps.client_config_docker.outputs.config ||
            (inputs.client_source == 'docker' && steps.client_config_docker.outputs.config || steps.client_config_git.outputs.config)
          }}
          ENDCONFIG
          EOF
  test:
    timeout-minutes: 540 # 9 hours
    needs: prepare
    runs-on: >-
      ${{
        matrix.simulator == 'ethereum/rpc-compat' && 'ubuntu-latest' ||
        contains(matrix.simulator, 'ethereum/eest/') && 'self-hosted-ghr-size-m-x64' ||
        'ubuntu-latest'
      }}
    concurrency:
      group: >-
        ${{ github.head_ref || inputs }}-${{ matrix.client }}-${{ matrix.simulator }}
    strategy:
      fail-fast: false
      matrix:
        client: >-
          ${{
            fromJSON(format('[{0}]', inputs.client || '
              "besu",
              "erigon",
              "go-ethereum",
              "nethermind",
              "nimbus-el",
              "reth"
          '))}}
        simulator: >-
          ${{
            fromJSON(format('[{0}]', inputs.simulator || '
            "ethereum/eest/consume-engine",
            "ethereum/eest/consume-rlp"
          '))}}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ethpandaops/hive-github-action/helpers/self-hosted-runner-dependencies@299a5ffad55b067d7dd26ab9fe40ff999cbb5029 # v0.3.0
        if: runner.environment != 'github-hosted'
      - uses: ethpandaops/actions/docker-login@a91b7a8dd6a264f5e845ac2aa52d2d6f24e6d01d
        with:
          username: ethpandaops
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: ethpandaops/hive-github-action@299a5ffad55b067d7dd26ab9fe40ff999cbb5029 # v0.3.0
        with:
          hive_repository: ${{ needs.prepare.outputs.hive_repo }}
          hive_version: ${{ needs.prepare.outputs.hive_tag }}
          client: ${{ matrix.client }}
          simulator: ${{ matrix.simulator }}
          client_config: ${{ needs.prepare.outputs.client_config }}
          extra_flags: >-
            ${{ env.GLOBAL_EXTRA_FLAGS }}
            ${{ matrix.simulator == 'ethereum/rpc-compat' && env.RPC_COMPAT_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-engine' && env.EEST_ENGINE_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-rlp' && env.EEST_RLP_FLAGS || '' }}
          s3_upload: true
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_path: ${{ env.S3_PATH }}
          s3_public_url: ${{ env.S3_PUBLIC_URL }}
          rclone_config: ${{ secrets.HIVE_RCLONE_CONFIG }}
          rclone_version: ${{ env.INSTALL_RCLONE_VERSION }}
          workflow_artifact_upload: true
          website_upload: true
